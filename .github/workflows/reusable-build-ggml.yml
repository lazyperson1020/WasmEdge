name: Build the GGML plugin

on:
  workflow_call:
    inputs:
      arch:
        type: string
        required: true
      runner:
        type: string
        required: true
      docker_tag:
        type: string
        required: true
      asset_tag:
        type: string
        required: true
      plugins:
        type: string
        required: true
      version:
        type: string
        required: true
      release:
        type: boolean
        default: false

env:
  build_tests: ${{ inputs.release && 'Off' || 'On' }}
  build_type: Release

jobs:
  build_on_manylinux:
    needs: [prepare, prepare_cache]
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include: ${{ fromJSON(inputs.plugins) }}
    name: ${{ matrix.plugin }} (${{ inputs.docker_tag }})
    runs-on: ${{ inputs.runner }}
    container:
      image: wasmedge/wasmedge:${{ inputs.docker_tag }}
      # Required for mounting debugfs
      # Tests of wasm_bpf also require privileges
      options: --privileged
    env:
      bin_name: ${{ matrix.bin }}
      target: ${{ inputs.release && matrix.bin || matrix.testBin }}
      test_dir: build/test/plugins/${{ matrix.dir }}
      output_dir: build/plugins/${{ matrix.dir }}
    steps:
      - id: prep
        run: |
          echo "artifact=WasmEdge-plugin-${{ matrix.plugin }}-${{ inputs.version }}-${{ inputs.asset_tag }}.tar.gz" >> $GITHUB_OUTPUT
          echo "filename=plugin_${{ matrix.plugin }}.tar.gz" >> $GITHUB_OUTPUT
      - uses: actions/cache/restore@v3
        with:
          key: ${{ needs.prepare.outputs.cache_key_ws }}
          path: ${{ needs.prepare.outputs.cache_path_ws }}
      - uses: actions/cache/restore@v3
        with:
          key: ${{ needs.prepare.outputs.cache_key_h }}
          path: ${{ needs.prepare.outputs.cache_path_h }}
      - name: Ensure git safe directory
        run: |
          git config --global --add safe.directory $(pwd)
      - name: Install dependencies
        shell: bash
        run: |
          # Running tests of wasm_bpf requires proper ebpf running environment
          mount -t debugfs none /sys/kernel/debug
      - name: Build ${{ matrix.plugin }}
        shell: bash
        run: |
          if [[ ${build_tests} != "On" ]]; then
            target=${bin_name%.*}
            target=${target#lib}
          fi

          cmake -Bbuild -GNinja ${{ matrix.options }}
          cmake --build build --target ${target}

          cp -f ${output_dir}/${bin_name} ${bin_name}
          tar -zcvf ${{ steps.prep.outputs.filename }} ${bin_name}
      - name: Test ${{ matrix.plugin }}
        if: ${{ !inputs.release }}
        run: |
          export LD_LIBRARY_PATH=$(pwd)/FFmpeg-n6.0/output/lib:$LD_LIBRARY_PATH
          cd ${test_dir}
          ./${target}
          cd -
      - name: Upload artifact ${{ matrix.plugin }}
        if: ${{ !inputs.release }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prep.outputs.artifact }}
          path: ${{ steps.prep.outputs.filename }}
      - name: Install gh on manylinux
        if: ${{ inputs.release }}
        run: |
          type -p yum-config-manager >/dev/null || sudo yum install yum-utils
          yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
          yum install -y gh
      - name: Upload WasmEdge ${{ matrix.plugin }} plugin tar.gz package
        if: ${{ inputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv ${{ steps.prep.outputs.filename }} ${{ steps.prep.outputs.artifact }}
          gh release upload ${{ inputs.version }} ${{ steps.prep.outputs.artifact }} --clobber
